#lang racket

(define (vectores)
  (define EDADES (vector 0 0 0 0 0 0))  ; crear vector
  (define NOMBRES (vector 0 0 0 0 0 0))
        ;  (vector-set! EDADES 0 55)   ;almacenaría un dato en un vector por programa
  (display "NOMBRE?: ")
  (vector-set! NOMBRES 0 (read))   ;almacena en un vector por lectura
  (newline)
  (display "EDAD?: ")
  (vector-set! EDADES 0 (read))   ;almacena en un vector por lectura
  (newline)

  (display "SU NOMBRE ES: ")
  (display (vector-ref NOMBRES 0))           ;; muestra contenido de vector
  (display "\nSU EDAD ES: ")
  (display (vector-ref EDADES 0))           ;; muestra contenido de vector
  (newline)

  (if (> (vector-ref EDADES 0) 50) ;evalua contenido de vector
    (display "LLEVADO...")
    (display "TODAVIA AGUANTA...")
   )
)

(vectores)
;-------------------------------------------------------
#lang racket
(define (vectores)
	(define vector (make-vector 10 0))
     ; make-vector CREA UN VECTOR de tamaño 10 con ceros
  
	(ver vector 0) 
     ;esta función (VER ) muestra el contenido del vector tras haberlo creado
  
	(newline)
	(llenar vector 0)  
     ; esta función (LLENAR ) ingresa datos al vector
  
	(newline)
	(ver vector 0) 
     ;esta función (VER ) muestra el contenido del vector tras ingresarle datos
)

(define (ver vector i)
	(if (< i 10)
		(begin
		(display (vector-ref vector i))    
             ; vector-ref referencia el contenido de una posición de un vector
      
		(ver vector (+ i 1))
		)
		(display "")
	)
)    

(define (llenar vector i)
	(if (< i  10)
		(begin
		(vector-set! vector i (* (+ i 1) (+ i 1)))    
                ; vector-set! asigna un valor o almacena un valor en una posición de un vector

            (llenar vector (+ i 1))
		)
		(display "")
	)
)

(vectores)